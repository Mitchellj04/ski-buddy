  def practice
        # elev = 3200
        elev = params[:height]
        elevation = elev.to_i
        mountain = Mountain.mountain_elevation(elevation) 
        render json: mountain, status: :ok
    end

get "/elevation/:height", to: "mountains#practice"


def self.mountain_elevation n 
    mountain = Mountain.all 
    mountain.select do |elev| 
        elev.elevation > n 
    end
end


# def groomed
#     trails = ""
#    trail_count = ""
#    mountain = find_mountain
#    trails = mountain.groomed_trails
# #    mountain.each do |t|
# #     trail_count = t.ticket_cost
# #     trails = "#{trail_count} out of the #{t.trails.count} trails are open"
# #    end
#     render json: trails
# end
    # def groomed_trails
    #     count = 0
    #     trail = []
    #     # mountain = Mountain.all
    #     self.trails.each do |t|
    #         if t.groomed == true 
    #         count += 1
    #         trail << t
    #         end
    #     end
    #     "#{count} out of the #{self.trails.count} are groomed"
    #     trail
    # end

    # // const filteredMap = filterTrails.map((trails) => { return <> <p>{trails.trail_name}</p>
    # // <p>{trails.difficulty}</p></>})
    # // const trailsData = () => {
    # //   if (showTrails.length === 0){
    # //    return <p>Please add trails</p>
    # //   }
    # //   else{
    # //     {trailMap}
    # //   }
    # // }

    //   const [filterTrails, setFilterTrails] = useState(["filter trails above"])

    // const handleFilter = (e) => {
    //   e.preventDefault()
    //   fetch(`/practice/${id}`)
    //   .then((resp) => resp.json())
    //   .then((mountain) => setFilterTrails(mountain))
    // }
  
    // console.log(filterTrails)